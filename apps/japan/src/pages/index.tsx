import { useCallback, useState, useEffect } from "react";
import Head from "next/head";
import LocationCardList from "./LocationCardList";
import { Drawer } from "../components/Drawer/Drawer";
import { JapanLocation } from "../assets/japanData";
import neighborhoods from "./api/tokyo.json";
import japan from "./api/japan.json";
import { LoadingOverlay, useMapBox } from "@jf/material";
import { useGeoloc } from "@jf/hooks";
import { RecenterViewport } from "../components/RecenterViewport/RecenterViewport";
import React from "react";
import { fonts } from "./../utils/fonts";
import {
  getFromLocalStorage,
  saveToLocalStorage,
} from "../utils/locale-storage";
import { callLambdaInNext } from "../utils/fetcher";
import { checkType } from "../utils/checkType";

const zoomKm: Record<number, number> = {
  1: 13,
  3: 12,
  5: 11,
  10: 10,
  15: 9,
  20: 9,
  25: 8,
  30: 8,
  35: 8,
  40: 8,
};

export default function Home({
  neighborhoodsData,
  japanData,
}: {
  neighborhoodsData: any;
  japanData: any;
}) {
  const [checkList, setCheckList] = useState<checkType[]>([]);
  const [checkLoading, setCheckLoading] = useState<boolean>(false);
  const [currentTag, setCuurentTag] = useState<string | null>("");
  const [view, setView] = useState<string>("map");
  const [km, setKm] = useState<string | null>("5");
  const [currentLocation, setCurrentLocation] = useState<JapanLocation | null>(
    null
  );

  const { location: currentPosition, getLocation } = useGeoloc();

  const [_, { viewport, onViewportChange, coordinate, onCoordinateClick }] =
    useMapBox();

  useEffect(() => {
    const km = getFromLocalStorage("km");
    if (km) {
      setKm(km);
    }
    const currentTag = getFromLocalStorage("currentTag");
    if (currentTag) {
      setCuurentTag(currentTag);
    }
  }, []);

  const handleKmChange = (km: string | null) => {
    saveToLocalStorage("km", km);
    setKm(km === "" || null ? null : km);
  };

  useEffect(() => {
    if (km && currentPosition && currentPosition.lat && currentPosition.lng) {
      onViewportChange((current) => {
        return {
          ...current,
          latitude: currentPosition.lat,
          longitude: currentPosition.lng,
          zoom: zoomKm[+km],
          transitionDuration: 1000,
        };
      });
    }
  }, [km, currentPosition]);

  const SetCurrentLocationToViewPortClick = useCallback(() => {
    getLocation();
    onViewportChange((current) => {
      if (!currentPosition) return current;
      return {
        ...current,
        latitude: currentPosition?.lat,
        longitude: currentPosition?.lng,
        zoom: 12,
        transitionDuration: 1000,
      };
    });
  }, [currentPosition]);

  const handleTagChange = (value: any) => {
    saveToLocalStorage("currentTag", value);
    setCuurentTag(value);
  };

  const refetchCheck = () => {
    setCheckLoading(true);
    callLambdaInNext("/check-list", "GET", null).then((result) => {
      setCheckList(result.data);
    });
    setCheckLoading(false);
  };

  const insertCheck = (id: string) => {
    setCheckLoading(true);
    callLambdaInNext("/check", "POST", { id }).then((result) => {
      refetchCheck();
    });
  };

  const unChecked = (id: string) => {
    setCheckLoading(true);
    callLambdaInNext("/unchecked", "POST", { id }).then((result) => {
      refetchCheck();
    });
  };

  useEffect(() => {
    refetchCheck();
  }, []);

  return (
    <>
      <Head>
        <title>JAPAN</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main style={{ ...fonts["Montserrat-Regular"].style }}>
        <LoadingOverlay
          visible={checkLoading}
          overlayBlur={2}
          sx={{ zIndex: 1000000 }}
        />
        <Drawer
          onTagChange={handleTagChange}
          tag={currentTag || ""}
          onViewChange={setView}
          view={view}
          currentLocation={currentLocation}
          onCurrentLocationChange={setCurrentLocation}
          km={km}
          onKmChange={handleKmChange}
          insertCheck={insertCheck}
          unChecked={unChecked}
          checkList={checkList}
          checkLoading={checkLoading}
        />

        <LocationCardList
          tag={currentTag || ""}
          view={view}
          viewport={viewport}
          insertCheck={insertCheck}
          km={km}
          unChecked={unChecked}
          currentPosition={currentPosition}
          onViewportChange={onViewportChange}
          onCoordinateClick={onCoordinateClick}
          onLocationChange={setCurrentLocation}
          currentLocation={currentLocation}
          neighborhoods={neighborhoodsData}
          japanData={japanData}
          checkList={checkList}
          checkLoading={checkLoading}
        />

        {currentPosition && (
          <RecenterViewport onClick={SetCurrentLocationToViewPortClick} />
        )}
      </main>
    </>
  );
}

export async function getStaticProps() {
  return {
    props: {
      japanData: japan,
      neighborhoodsData: neighborhoods,
    },
  };
}
